# Python
#### Python을 배우는 이유
- 쉽고 간결한 문법
- 파이썬 커뮤니티의 지원
- 광범위한 응용 분야
- 3.11 버전의 경우 인공지능 등 여러 오픈소스에서 사용 중
#### Python의 데이터 분석 활용
- 풍부한 라이브러리
    - pandas, numpy, matplotlib  등 데이터 분석에 최적화된 라이브러리를 제공
- 데이터 처리 및 시각화
- 머신러닝 및 인공지능
    - scikit-learn, tensorfolw, keras 등의 라이브러리를 통해 머신러닝과 딥러닝 무델을 구현할 수 있음
#### 알고리즘 구현에 유리한 Python
- 직관적인 문법
- 강력한 표준 라이브러리
- 빠른 프로토타이핑
### 객체
- 파이썬에 있는 모든 것
### 메서드
- 객체에 속한 **함수**
- 객체의 상태를 조작하거나 동작을 수행
- 데이터 타입 객체.메서드()
    - client.char.com.create()
## Data types
- Data types
- Numeric Types
- Sequence Types
    1. 순서 (정렬X)
    2. 인덱싱
    3. 슬라이싱
        - 시퀀스의 일부분을 추출하는 방법
        - str[0:-1] : 0부터 -1까지
        - str[0:5:2] : 0부터 5까지 2단위로
        - str[::-1] : 처음부터 끝까지 역순으로
    4. 길이
    5. 반복
    - str
        - **변경 불가능**한 시퀀스 자료형
        - 작은따옴표 끼리, 또는 큰따옴표 끼리 감싸서 표현
        - s.replace(old, new[, count]) : 바꿀 대상 글자를 새로운 글자로 바꿔서 반환
        - s.strip([chars]) : 공백이나 특정 문자를 제거
        - s.split(sep=None, maxsplit=1) : 공백이나 특정 문자를 기준으로 분리
        - 'separator'.join(iterable) : 구분자로 iterable의 문자열을 연결한 문자열을 반환
    - **f-string**
        - 문자열 앞에 `f` 또는 `F` 접두어를 붙여 `{}` 안에 변수나 표현식을 삽입
        - 예: `name = "Alice"` → `f"Hello, {name}!"` → `"Hello, Alice!"`
        - `{}` 안에는 연산이나 함수 호출 등 파이썬 표현식 사용 가능  
            - 예: `f"{3 * 2}"` → `"6"`
    - list
        - **변경 가능**한 시퀀스 자료형
        - 어떤 자료형도 데이터로 저장할 수 있음
        - L.append(x) : 리스트 마지막에 항목 x 를 추가
        - L.extend(m) : lterable m의 모든 항목들을 리스트 끝에 추가 (+=)
        - L.pop(i) : 리스트 가장 오른쪽에 있는 항목(마지막)을 반환 후 제거
        - L.reverse() : 리스트의 순서를 역순으로 변경 (정렬X)
        - L.sort() : 리스트를 정렬 (매개변수 이용가능)
    - tuple
        - 변경 불가능한 시퀀스 자료형
        - 파이썬 내부 동작에서 주로 사용됨
    - range
        - 연속된 정수 시퀀스를 생성하는 변경 불가능한 자료형
        - range(시작 값, 끝 값, 증가 값)
            - 증가 값이 없으면 1, 음수면 감소, 0이면 에러
        - range(n) : 0부터 n-1 까지의 숫자 시퀀스
        - range(n, m) : n부터 m-1 까지의 숫자 시퀀스
- Non-Sequence Types
    - dict : 딕셔너리
        - hash table
        - key-value 쌍으로 이루어진 순서와 중복이 없는 변경 가능한 자료형
        - {'key':'value'}
            - key 는 변경 불가능한 자료형만 사용 가능 (str, int, float, tuple, range)
            - value 는 모든 자료형 사용 가능
        - D.get(k) : 키 k에 연결된 값을 반환 (키가 없으면 None을 반환)
        - D.get(k, v) : 키 k에 연결된 값을 반환하거나 키가 없으면 기본 값으로 v를 반환
        - D.keys() : 딕셔너리 D의 키를 모은 객체를 반환
        - D.values() : 딕셔너리 D의 값을 모은 객체를 반환
        - D.items() : 딕셔너리 D의 키/값 쌍을 모은 객체를 반환
        - D.pop(k) : 딕셔너리 D에서 키 k를 제거하고 연결됐던 값을 반환 (없으면 오류)
        - D.pop(k, v) : 딕셔너리 D에서 키 k를 제거하고 연결됐던 값을 반환 (없으면 v를 반환)
    - set : 세트
        - 순서와 중복이 없는 변경 가능한 자료형
        - 수학에서의 집합과 동일한 연산 처리 가능
        - 딕셔너리와 표기방법이 중복되기 때문에 비어있는 세트를 생성할 경우 set() 로 생성
        - 합집합 : aSet | bSet
        - 차집합 : aSet - bSet
        - 교집합 : aSet & bSet
        - s.add(x) : 세트 s에 항목 x를 추가. 이미 x가 있다면 변화 없음
        - s.remove(x) : 세트 s에서 항목 x를 제거. 항목 x가 없을 경우 Key error
- Other Types
    - None
        - '값이 없음'을 표현하는 자료형 (NULL)
        - 함수의 return 이 없는 경우 None 을 반환
    - Boolean
        - 참(True) 과 거짓(False) 를 표현하는 자료형
- 복사
    - 파이썬에서는 데이터의 분류에 따라 복사가 달라짐
        - 변경 가능/불가능
    - 복사 유형
        1. 할당
            - 할당 연산자(=)를 통한 복사는 해당 객체에 대한 객체 참조를 복사
        2. 얕은 복사
            - b = a[:]
            - 새로운 리스트를 생성하여 값을 복사
            - 원본 객체와 독립적으로 존재
            - 한계
                - 2차원 리스트와 같이 변경 가능한 객체 안에 변경 가능한 객체가 있는 경우 내부 객체의 주소가 같기 때문에 독립성이 보장되지 않음
        3. 깊은 복사
            - copied_list = copy.deepcopy(original_list)
            - 내부까지 값을 복사하여 완전히 독립적으로 존재
- Type Conversion
    - 암시적 형변환
        - 파이썬이 자동으로 형변환을 하는 것
        - Boolean과 Numeric Type에서만 가능
            - True + 3 = 4
    - 명시적 형변환
        - 개발자가 직접 형변환을 하는 것
## Collection 간 형변환 정리
|-|str|list|tuple|range|set|dict|
|---|---|---|---|---|---|---|
|str|-|O|O|X|O|X|
|list|O|-|O|X|O|X|
|tuple|O|O|-|X|O|X|
|range|O|O|O|-|O|X|
|set|O|O|O|X|-|X|
|dict|O|O(key만)|O(key만)|X|O(key만)|-|
## Operator
- 기본 연산자
    - 산술 연산자
        - - : 음수 부로
        - + : 덧셈
        - - : 뺄셈
        - * : 곱셈
        - / : 나눗셈
        - // : 정수 나눗셈(몫)
        - % : 나머지
        - ** : 지수(거듭제곱)
    - 복합 연산자
        - += : a = a + b
        - -= : a = a - b
        - *= : a = a * b
        - /= : a = a / b
        - //= : a = a // b
        - %= : a = a % b
        - **= : a = a ** b
    - 비교 연산자
        - < : 미만
        - <= : 이하
        - > : 초과
        - >= : 이상
        - == : 같음
        - != : 같지 않음
        - is : 같음
        - is not : 같지 않음
        - is 비교 연산자
            - 메모리 내에서 같은 객체를 참조하는지 확인
            - == : 동등성(equality), is : 식별성(identity)
    - 논리 연산자
        - and : 논리곱
        - or : 논리합
        - not : 논리부정
- 단축평가
    - 논리 연산에서 두번째 피연산자를 평가하지 않고 결과를 결정하는 동작
- 멤버십 연산자
    - 특정 값이 시퀀스나 다른 컬렉션에 속하는지 여부를 확인
    - in
    - not in
- 시퀀스형 연산자
    - +
    - *
    - 시퀀스 간 연산에서 산술 연산자일때와는 다른 역할을 가짐
- 연산자 우선순위 정리
    - 기존 사칙연산과 유사함
    - 괄호 -> 사칙연산 -> 논리비교
## Control of flow
- 제어문
    - 코드의 실행 흐름을 제어하는 데 사용되는 구문
    - 조건에 따라 코드 블록을 실행하거나 반복적으로 코드를 실행
- 조건문
    - if, elif, else
    - 조건 순서 중요
    - if 표현식:
        - 코드 블록
    - elif 표현식:
        - 코드 블록
    - else:
        - 코드 블록
- 반복문
    - for, while (for <-> while 연습할 것)
    - for
        - 임의의 시퀀스의 항목들을 그 시퀀스에 들어있는 순서대로 반복
        - for 변수 in 반복 가능한 객체:
            - 코드 블록
        - 반복 횟수가 명확하게 정해져 있는 경우에 유용
        - 리스트, 튜플, 문자열 등 시퀀스 형식의 데이터를 처리할 때
    - while
        - 주어진 조건식이 참(True)인 동안 코드를 반복해서 실행
        - while 조건식:
            - 코드 블록
        - 반복 횟수가 불명확하거나 조건에 따라 반복을 종료해야 할 때
        - 사용자의 입력을 받아서 특정 조건이 충족될 때까지 반복하는 경우
    - 반복문 제어
        - break : 반복 즉시 중지
        - continue : 다음 반복으로 건너뜀
        - pass : 아무 동작 수행하지 않고 넘어감
- List Comprehension
    - 간결하고 효율적인 리스트 생성 방법
    - list(expression for 변수 in iterable)
    - list(expression for 변수 in iterable if 조건식)
## Functions
- 함수
    - 입력값이 있을 때 내부에서 로직을 실행하고 실행 결과를 출력하는 것
    - def 함수명(매개변수parameter) :
        - 코드 블록
        - return 출력값
    - 일급 객체
        - 함수가 변수에 할당될 수 있음
        - 함수가 다른 함수의 인자로 전달될 수 있음
        - 함수가 다른 함수에 의해 반환될 수 있음
    - 익명 함수로 사용 가능(람다 표현식)
- 매개변수와 인자
    - 매개변수(parameter)
        - 함수를 정의할 때, 함수가 받을 값을 나타내는 변수
    - 인자(argument)
        - 함수를 호출할 때, 실제로 전달되는 값
        - 위치 인자
            - 함수 호출 시 인자의 위치에 따라 전달되는 인자
            - **반드시 값을 전달해야 함**
        - 기본 인자 값
            - 함수 정의에서 매개변수에 기본 값을 할당하는 것
        - 키워드 인자
            - 함수 호출 시 인자의 이름과 함께 값을 전달하는 인자
            - **호출 시 키워드 인자는 위치 인자 뒤에 위치해야 함**
        - 임의의 인자 목록
            - 정해지지 않은 개수의 인자를 처리하는 인자
            - 함수 정의 시 매개변수 앞에 '*'를 붙여 사용하며, 여러 개의 인자를 tuple로 처리
        - 임의의 키워드 인자 목록
            - 정해지지 않은 개수의 키워드 인자를 처리하는 인자
            - 함수 정의 시 매개변수 앞에 '**'를 붙여 사용하며, 여러 개의 인자를 dictionary로 묶어 처리
        - 함수 인자 권장 순서
            - 위치 -> 기본 -> 가변 -> 가변 키워드
            - 호출 시 인자를 전달하는 과정에서 혼란을 줄일 수 있도록 함
            - **상황에 따라 조정될 수 있음**
- Packing $ Unpacking
    - Packing
        - 여러 개의 값을 하나의 변수에 묶어서 담는 것
        - 변수에 담긴 값들은 튜플 형태로 묶임
    - Unpacking
        - 패킹된 변수의 값을 개별적인 변수로 분리하여 할당하는 것
        - 튜플이나 리스트 등의 객체의 요소들을 개별 변수에 할당
- 내장 함수
    - len
    - max
    - min
    - sum
    - sorted
    - map
        - 순회 가능한 데이터구조의 모든 요소에 함수를 적용하고, 그 결과를 map object로 반환
        - map(fungtion, iterable)
    - zip
        - 임의의 iterable을 모아 튜플을 원소로 하는 zip object를 반환
        - zip(*iterables)
- 람다 표현식
    - 익명 함수
    - lambda 매개변수: 표현식
### 참고
- **Style Guide** : 코드의 일관성과 가독성을 향상시키기 위한 규칙과 권장 사항들의 모음
    - Python Style Guide
    - 변수명은 무엇을 위한 변수인지 직관적인 이름을 가져야 함
    - 공백 4칸을 사용하여 코드 블록을 들여쓰기
    - 한 줄의 길이는 79자로 제한하며, 길어질 경우 줄 바꿈을 사용
    - 문자와 밑줄(_)을 사용하여 함수, 변수, 속성의 이름을 작성
    - 함수 정의나 클래스 정의 등의 블록 사이에는 빈 줄을 추가
    - https://peps.python.org/pep-0008/
- Python Tutor
    - 파이썬 프로그램이 어떻게 실행되는지 도와주는 시각화 도우미
    - https://pythontutor.com/
#### Collection
|컬렉션|변경 가능 여부|순서 여부|
|---|---|---|
|str|X|O|
|list|O|O|
|tuple|X|O|
|set|O|X|
|dict|O|X|
- 불변과 가변
    - https://docs.python.org/3.9/library/stdtypes.html
- enumerate
    - iterable 객체의 각 요소에 대해 인덱스와 함께 반환하는 내장함수
- 함수와 scope
    - 함수는 코드 내부에 local scope를 생성하며, 그 외의 공간인 global scope로 구분
    - scope
        - global scope : 코드 어디에서든 참조할 수 있는 공간
        - local scope : 함수가 만든 scope(함수 내부에서만 참조 가능)
    - variable
        - global variable : global scope에 정의된 변수
        - local variable : local scope에 정의된 변수
- 이름 검색 규칙
    - 파이썬에서 사용되는 이름(식별자)들은 특정한 이름공간에 저장되어 있음
    - **LEGB Rule**
        - 이름을 찾아 나가는 순서
        1. Local scope : 지역 범위(현재 작업중인 범위)
        2. Enclosed scope : 지역 범위 한 단계 위 범위
        3. Global scope : 최상단에 위치한 범위
        4. Built-in scope : 모든 것을 담고 있는 범위(정의하지 않고 사용할 수 있는 모든 것)
        - 함수 내에서는 바깥 Scope의 변수에 접근 가능하나 수정은 할 수 없음
    - global 키워드 : 변수의 스코프를 전역 범위로 지정하지 위해 사용
- 표현식 : 하나의 값으로 나타낼 수 있는 문장 또는 식
- iterable : 반복 가능한 객체 (시퀀스 객체 뿐만 아니라 dict, set 등 포함)
